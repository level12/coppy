#!/usr/bin/env python
# [MISE] description="Generate demo project"

from pathlib import Path
import shutil

import click
import copier

from coppy_tasks_lib import demo_dest_default, proj_root, sub_run


@click.command()
@click.argument('dest', type=click.Path(path_type=Path), default=demo_dest_default())
@click.option('--bootstrap/--no-bootstrap', default=True)
@click.option('--nox/--no-nox', default=True)
@click.option('--update', 'is_update', is_flag=True, default=False)
@click.option('--rm-existing', is_flag=True, default=False)
@click.option('--head', 'use_head', is_flag=True, default=False)
def main(
    dest: Path,
    bootstrap: bool,
    nox: bool,
    is_update: bool,
    rm_existing: bool,
    use_head: bool,
):
    """
    Generate demo project
    """
    if is_update:
        bootstrap = False

    pname = 'CoppyDemo'
    dest = dest.expanduser().resolve()

    args = {
        'project_name': pname,
        'author_name': 'Picard',
        'author_email': 'jpicard@starfleet.space',
        'gh_org': 'level12',
        'gh_repo': 'coppy-demo',
    }

    if dest.exists() and rm_existing:
        # Remove all the contents but not the actual directory.  It makes troubleshooting the
        # demo easier b/c you don't have to keep changing out of and then back into the demo
        # directory in the shell.
        for path in dest.iterdir():
            if path.name in ('.git', 'uv.lock') and is_update:
                continue

            if path.is_dir():
                shutil.rmtree(path)
            else:
                path.unlink()

    copier.run_copy(
        proj_root.as_posix(),
        dest.as_posix(),
        args,
        unsafe=True,
        defaults=True,
        vcs_ref='HEAD' if use_head else None,
    )

    print('Demo created at:', dest)

    sub_run('mise', 'trust', cwd=dest, check=False)
    if bootstrap:
        sub_run('mise', 'run', 'bootstrap', cwd=dest)

    if nox:
        sub_run('mise', 'exec', '--', 'uv', 'run', 'nox', cwd=dest)


if __name__ == '__main__':
    main()
